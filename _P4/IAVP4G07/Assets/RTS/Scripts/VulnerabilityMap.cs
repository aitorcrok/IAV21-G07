using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace es.ucm.fdi.iav.rts
{
    public class VulnerabilityMap : GraphGrid
    {
        private TensionMap tensionMap;
        private InfluenceMap influenceMap;
        // works as vertices in regular graph
        // GameObject[] locations;

        void Awake()
        {
            tensionMap = GetComponent<TensionMap>();
            influenceMap = GetComponent<InfluenceMap>();
        }
        public void ComputeInfluence()
        {
            List<Vertex> tensionVertex = tensionMap.GetVertex();
            List<Vertex> influenceVertex = influenceMap.GetVertex();

            for (int i = 0; i < GetRows(); i++)
            {
                for (int j = 0; j < GetCols(); i++)
                {
                    int id = GridToId(j, i);

                    VertexInfluence vertex = vertices[id] as VertexInfluence;
                    VertexInfluence tensionVertice = tensionVertex[id] as VertexInfluence;
                    VertexInfluence influenceVertice = influenceVertex[id] as VertexInfluence;

                    vertex.value = tensionVertice.value - Mathf.Abs(influenceVertice.value);
                    float value = vertex.value;

                    Color mycolor;

                    if (value > 0) mycolor = Color.blue;
                    else if (value < 0) mycolor = Color.red;
                    else mycolor = Color.white;

                    mycolor.a = value;

                    GetVertexObj(id).GetComponent<Renderer>().GetComponent<Material>().color = mycolor;
                }
            }
        }

        public Transform GetMostVulnerable(out float value)
        {
            float max = -1;
            Transform pos = null;
            for (int i = 0; i < GetRows(); i++)
            {
                for (int j = 0; j < GetCols(); i++)
                {
                    int id = GridToId(j, i);

                    VertexInfluence vertex = vertices[id] as VertexInfluence;
                    if (vertex.value > max)
                    {
                        max = vertex.value;
                        pos = vertex.transform;
                    }
                }
            }

            value = max;
            return pos;
        }
    }
}